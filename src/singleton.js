// Singleton

/* 
  Архитектура паттерна Singleton основана на идее использования 
  глобальной переменной, имеющей следующие важные свойства:

  1) Такая переменная доступна всегда. Время жизни глобальной 
  переменной - от запуска программы до ее завершения.
  2) Предоставляет глобальный доступ, то есть, такая переменная 
  может быть доступна из любой части программы.

  Однако, использовать глобальную переменную некоторого 
  типа непосредственно невозможно, так как существует 
  проблема обеспечения единственности экземпляра, а именно, 
  возможно создание нескольких переменных того же самого 
  типа (например, стековых).

  Для решения этой проблемы паттерн Singleton возлагает контроль 
  над созданием единственного объекта на сам класс. Доступ к 
  этому объекту осуществляется через статическую функцию-член 
  класса, которая возвращает указатель или ссылку на него. Этот 
  объект будет создан только при первом обращении к методу, а 
  все последующие вызовы просто возвращают его адрес. Для 
  обеспечения уникальности объекта, конструкторы и оператор 
  присваивания объявляются закрытыми.
*/

// const Singleton = (function() {
//   let instance = null;

//   return function() {
//     if (instance) return instance;

//     instance = this;
//   };
// })();

// const s1 = new Singleton();
// const s2 = new Singleton();

// console.log(s1 === s2);
